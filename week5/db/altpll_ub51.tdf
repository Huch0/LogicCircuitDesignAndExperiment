--altpll CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" clk0_divide_by=1 clk0_multiply_by=1 clk0_phase_shift="0" clk1_divide_by=1 clk1_multiply_by=1 clk2_divide_by=1 clk2_multiply_by=1 clk3_divide_by=10 clk3_multiply_by=1 compensate_clock="CLK0" device_family="Cyclone V" inclk0_input_frequency=10000 operation_mode="normal" width_clock=10 width_phasecounterselect=4 clk inclk CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 20.1 cbx_altclkbuf 2020:11:11:17:06:45:SJ cbx_altiobuf_bidir 2020:11:11:17:06:45:SJ cbx_altiobuf_in 2020:11:11:17:06:45:SJ cbx_altiobuf_out 2020:11:11:17:06:45:SJ cbx_altpll 2020:11:11:17:06:45:SJ cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_compare 2020:11:11:17:06:45:SJ cbx_lpm_counter 2020:11:11:17:06:45:SJ cbx_lpm_decode 2020:11:11:17:06:45:SJ cbx_lpm_mux 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ cbx_stratixiii 2020:11:11:17:06:46:SJ cbx_stratixv 2020:11:11:17:06:46:SJ cbx_util_mgl 2020:11:11:17:06:46:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION generic_pll (fbclk, refclk, rst)
WITH ( duty_cycle, output_clock_frequency, phase_shift, reference_clock_frequency)
RETURNS ( fboutclk, locked, outclk);

--synthesis_resources = generic_pll 4 
SUBDESIGN altpll_ub51
( 
	clk[9..0]	:	output;
	fbout	:	output;
	inclk[1..0]	:	input;
	locked	:	output;
) 
VARIABLE 
	generic_pll1 : generic_pll
		WITH (
			duty_cycle = 50,
			output_clock_frequency = "10000 ps",
			phase_shift = "0 ps",
			reference_clock_frequency = "10000 ps"
		);
	generic_pll2 : generic_pll
		WITH (
			duty_cycle = 50,
			output_clock_frequency = "10000 ps",
			phase_shift = "0 ps",
			reference_clock_frequency = "10000 ps"
		);
	generic_pll3 : generic_pll
		WITH (
			duty_cycle = 50,
			output_clock_frequency = "10000 ps",
			phase_shift = "0 ps",
			reference_clock_frequency = "10000 ps"
		);
	generic_pll4 : generic_pll
		WITH (
			duty_cycle = 50,
			output_clock_frequency = "100000 ps",
			phase_shift = "0 ps",
			reference_clock_frequency = "10000 ps"
		);
	areset	: NODE;
	fb_clkin	: WIRE;

BEGIN 
	generic_pll1.fbclk = fb_clkin;
	generic_pll1.refclk = inclk[0..0];
	generic_pll1.rst = areset;
	generic_pll2.fbclk = fb_clkin;
	generic_pll2.refclk = inclk[0..0];
	generic_pll2.rst = areset;
	generic_pll3.fbclk = fb_clkin;
	generic_pll3.refclk = inclk[0..0];
	generic_pll3.rst = areset;
	generic_pll4.fbclk = fb_clkin;
	generic_pll4.refclk = inclk[0..0];
	generic_pll4.rst = areset;
	areset = GND;
	clk[] = ( B"0", B"0", B"0", B"0", B"0", B"0", generic_pll4.outclk, generic_pll3.outclk, generic_pll2.outclk, generic_pll1.outclk);
	fb_clkin = generic_pll1.fboutclk;
	fbout = fb_clkin;
	locked = generic_pll1.locked;
END;
--VALID FILE
