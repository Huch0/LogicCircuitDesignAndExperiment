// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/12/2023 20:35:20"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          week2_2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module week2_2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg d0;
reg d1;
reg d2;
reg d3;
reg d4;
reg d5;
reg d6;
reg d7;
reg d8;
reg d9;
reg d10;
reg d11;
// wires                                               
wire b0;
wire b1;
wire b2;
wire b3;

// assign statements (if any)                          
week2_2 i1 (
// port map - connection between master ports and signals/registers   
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.d0(d0),
	.d1(d1),
	.d2(d2),
	.d3(d3),
	.d4(d4),
	.d5(d5),
	.d6(d6),
	.d7(d7),
	.d8(d8),
	.d9(d9),
	.d10(d10),
	.d11(d11)
);
initial 
begin 
#1000000 $finish;
end 

// d0
initial
begin
	d0 = 1'b1;
	d0 = #30000 1'b0;
end 

// d1
initial
begin
	d1 = 1'b0;
	d1 = #40000 1'b1;
	d1 = #30000 1'b0;
end 

// d2
initial
begin
	d2 = 1'b0;
	d2 = #80000 1'b1;
	d2 = #30000 1'b0;
end 

// d3
initial
begin
	d3 = 1'b0;
	d3 = #120000 1'b1;
	d3 = #30000 1'b0;
end 

// d4
initial
begin
	d4 = 1'b0;
	d4 = #160000 1'b1;
	d4 = #30000 1'b0;
end 

// d5
initial
begin
	d5 = 1'b0;
	d5 = #200000 1'b1;
	d5 = #30000 1'b0;
end 

// d6
initial
begin
	d6 = 1'b0;
	d6 = #240000 1'b1;
	d6 = #30000 1'b0;
end 

// d7
initial
begin
	d7 = 1'b0;
	d7 = #280000 1'b1;
	d7 = #30000 1'b0;
end 

// d8
initial
begin
	d8 = 1'b0;
	d8 = #320000 1'b1;
	d8 = #30000 1'b0;
end 

// d9
initial
begin
	d9 = 1'b0;
	d9 = #360000 1'b1;
	d9 = #30000 1'b0;
end 

// d10
initial
begin
	d10 = 1'b0;
	d10 = #400000 1'b1;
	d10 = #30000 1'b0;
end 

// d11
initial
begin
	d11 = 1'b0;
	d11 = #440000 1'b1;
	d11 = #30000 1'b0;
end 
endmodule

